#log4j.rootLogger=[level],appenderName1,appenderName2....
#level:是日志的优先级别，分为OFF,FATAL,ERROR,WARN,INFO,DEBUG,ALL或自定义级别
#log4j建议只使用四个级别，优先级从高到低：ERROR,WARN,INFO,DEBUG。
#通过在这里定义的级别，你可以控制到应用程序中相对级别的日志信息的开关。
#比如：这里定义了INFO级别，则应用程序中所有DEBUG级别的日志信息将不被打印出来。
#appenderName：就是指日志信息输出到哪个地方。你可以同时制定多个输出地方。
#比如:log4j.rootLogger=info,A,B,C配置了3个输出地方
#这个名字可以任意(如上面的A)，但必须与我们后面进行设置名字对应。

log4j.rootLogger=DEBUG,Console





#####################################################

#log4j.appender.A=
#此句为定义名为A的输出端是哪些类型，可以是：
#org.apache.log4j.ConsoleAppender  输出到控制台
#org.apache.log4j.FileAppender     输出到文件中
#org.apache.log4j.DailyRollingFileAppender   每天生产一个日志文件
#org.apache.log4j.RollingFileAppender    文件大小到达指定尺寸的时候产生一个新文件
#org.apache.log4j.WriterAppender 将日志信息以流格式发送到任意指定位置

#log4j.appender.A.layout=
#此句为定位名为A的输出端的layout是哪种类型，可以是：
#org.apache.log4j.HTMLLayout   以HTML表格形式布局
#org.apache.log4j.PatternLayout   可以灵活的指定布局模式
#org.apache.log4j.SimpleLayout  包含日志信息的级别和信息字符串
#org.apache.log4j.TTCCLayout    包含日志产生的时间，线程，类别等等信息

#log4j.appender.A.layout.ConversionPattern=
#打印参数如下：
# %m   输出代码中指定的信息 
# %M   输出打印该条日志的方法名
# %P   输出优先级
# %r   输出自应用启动到输出到log信息耗费的毫秒数
# %c   输出所属的类目，通常就是所在类的全名
# %t   输出产生该日志事件的线程名:
# %n   输出一个回车换行符，windows平台为"rn"，unix平台为"n";
# %d   输出日志的时间点的日期或时间，默认格式为ISO8601，也可以在其后面指定格式，
#比如：%d{yyyy-MM-dd HH:mm:ss,sss},输出类似：2017-11-23 22:10:28:921;
# %l   输出日志事件的发生位置，及在代码中的行数
#
#

#  Console  #
log4j.appender.Console=org.apache.log4j.ConsoleAppender
log4j.appender.Console.layout=org.apache.log4j.PatternLayout
log4j.appender.Console.layout.ConversionPattern=%d [%t] %-5p [%c] -%m%n
log4j.logger.java.sql.ResultSet=INFO
log4j.logger.org.apache=INFO
log4j.logger.java.sql.Connection=DEBUG
log4j.logger.java.sql.Statement=DEBUG
log4j.logger.java.sql.PreparedStatement=DEBUG






